"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var readline_1 = __importDefault(require("readline"));
var UP = Buffer.from([0x1b, 0x5b, 0x41]);
var DOWN = Buffer.from([0x1b, 0x5b, 0x42]);
var Prompt = /** @class */ (function () {
    function Prompt(app) {
        var _this = this;
        this.history = [];
        this.position = -1;
        this.app = app;
        process.stdin.on('data', function (data) { return _this.oninput(data); });
    }
    Prompt.prototype.ask = function () {
        var _this = this;
        this.rl = readline_1.default.createInterface({
            input: process.stdin,
            output: process.stdout,
            completer: function (line) {
                var completions = _this.history.filter(function (l) { return l.startsWith(line); });
                return [completions, line];
            }
        });
        this.rl.question('# ', function (line) {
            var _a, _b;
            _this.history.unshift(line);
            _this.position = -1;
            var args = [];
            var arg = '';
            var isString = false;
            var isObject = false;
            while (line.length > 0) {
                var c = line[0];
                line = line.substr(1);
                if (c === ' ' && !isString && !isObject) {
                    args.push(arg);
                    arg = '';
                }
                else if (isString && c === '\"')
                    isString = false;
                else if (!isString && c === '\"')
                    isString = true;
                else
                    arg += c;
            }
            if (arg.length > 0)
                args.push(arg);
            if (args.length === 0)
                return _this.ask();
            var event = args.shift();
            (_a = _this.app.socket) === null || _a === void 0 ? void 0 : _a.emit.apply(_a, __spreadArray([event], args, false));
            (_b = _this.rl) === null || _b === void 0 ? void 0 : _b.close();
            _this.ask();
        });
    };
    Prompt.prototype.log = function () { };
    Prompt.prototype.oninput = function (data) {
        var _a, _b;
        if (!this.rl)
            return;
        var oldPos = this.position;
        if (data.equals(UP))
            this.position = Math.min(this.history.length - 1, this.position + 1);
        else if (data.equals(DOWN))
            this.position = Math.max(-1, this.position - 1);
        else
            return;
        if (oldPos === this.position)
            return;
        readline_1.default.clearLine(process.stdout, 0);
        readline_1.default.cursorTo(process.stdout, 0);
        process.stdout.write('# ');
        // this.rl.line = ''
        (_a = this.rl) === null || _a === void 0 ? void 0 : _a.write("" + ((_b = this.history[this.position]) !== null && _b !== void 0 ? _b : ''));
    };
    return Prompt;
}());
exports.default = Prompt;
